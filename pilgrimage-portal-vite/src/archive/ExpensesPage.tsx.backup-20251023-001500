import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Table, Modal, Form, Alert, Badge, Tabs, Tab } from 'react-bootstrap';
import { expensesAPI, toursAPI, Expense, Tour } from '../services/api';
import './ExpensesPage.css';

const ExpensesPage: React.FC = () => {
  // State
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [tours, setTours] = useState<Tour[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // Pagination (for future use)
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  
  // Filters
  const [filters, setFilters] = useState({
    category: '',
    tourId: '',
    paymentMethod: '',
    isApproved: undefined as boolean | undefined,
    search: '',
    sortBy: 'expenseDate',
    sortOrder: 'desc' as 'asc' | 'desc'
  });
  
  // Modal state
  const [showModal, setShowModal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [currentExpense, setCurrentExpense] = useState<Expense | null>(null);
  
  // Active tab
  const [activeTab, setActiveTab] = useState('list');
  
  // Statistics
  const [statistics, setStatistics] = useState({
    totalAmount: 0,
    approvedAmount: 0,
    pendingAmount: 0,
    totalCount: 0,
    categoryStats: [] as Array<{ category: string; icon: string; count: number; amount: number }>
  });
  
  // Form state
  const [expenseForm, setExpenseForm] = useState({
    description: '',
    amount: 0,
    category: 'accommodation',
    expenseDate: '',
    tourId: '',
    paymentMethod: 'cash' as 'cash' | 'card' | 'upi' | 'netbanking' | 'other',
    receiptNumber: '',
    notes: '',
    vendor: {
      name: '',
      contact: '',
      address: ''
    },
    location: {
      name: '',
      address: ''
    }
  });
  
  // Constants
  const expenseCategories = [
    { value: 'accommodation', label: 'Accommodation', icon: '🏨' },
    { value: 'transportation', label: 'Transportation', icon: '🚌' },
    { value: 'food', label: 'Food & Meals', icon: '🍽️' },
    { value: 'activities', label: 'Activities', icon: '🎯' },
    { value: 'guides', label: 'Guides & Services', icon: '👨‍🏫' },
    { value: 'miscellaneous', label: 'Miscellaneous', icon: '📝' },
    { value: 'other', label: 'Other', icon: '💰' }
  ];
  
  const paymentMethods = [
    { value: 'cash', label: 'Cash', icon: '💵' },
    { value: 'card', label: 'Card', icon: '💳' },
    { value: 'upi', label: 'UPI', icon: '📱' },
    { value: 'netbanking', label: 'Net Banking', icon: '🏦' },
    { value: 'other', label: 'Other', icon: '💰' }
  ];
  
  // Fetch tours on mount
  useEffect(() => {
    fetchTours();
  }, []);
  
  // Fetch expenses when filters change
  useEffect(() => {
    fetchExpenses();
  }, [filters]);
  
  // Calculate statistics when expenses change
  useEffect(() => {
    calculateStatistics();
  }, [expenses]);
  
  // Fetch tours
  const fetchTours = async () => {
    try {
      const response = await toursAPI.getAll({ limit: 100 });
      setTours(response.data.tours || []);
    } catch (error: any) {
      console.error('Error fetching tours:', error);
    }
  };
  
  // Fetch and filter expenses
  const fetchExpenses = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await expensesAPI.getAll();
      
      if (Array.isArray(response.data)) {
        let filteredExpenses = response.data;
        
        // Apply filters
        if (filters.category) {
          filteredExpenses = filteredExpenses.filter(e => e.category === filters.category);
        }
        if (filters.tourId) {
          filteredExpenses = filteredExpenses.filter(e => 
            typeof e.tour === 'object' ? e.tour._id === filters.tourId : e.tour === filters.tourId
          );
        }
        if (filters.paymentMethod) {
          filteredExpenses = filteredExpenses.filter(e => e.paymentMethod === filters.paymentMethod);
        }
        if (filters.isApproved !== undefined) {
          filteredExpenses = filteredExpenses.filter(e => e.isApproved === filters.isApproved);
        }
        if (filters.search) {
          const searchLower = filters.search.toLowerCase();
          filteredExpenses = filteredExpenses.filter(e =>
            e.description?.toLowerCase().includes(searchLower) ||
            e.receiptNumber?.toLowerCase().includes(searchLower) ||
            e.notes?.toLowerCase().includes(searchLower) ||
            e.vendor?.name?.toLowerCase().includes(searchLower)
          );
        }
        
        // Apply sorting
        filteredExpenses.sort((a, b) => {
          const sortBy = filters.sortBy;
          let aVal: any, bVal: any;
          
          if (sortBy === 'expenseDate') {
            aVal = new Date(a.expenseDate || 0).getTime();
            bVal = new Date(b.expenseDate || 0).getTime();
          } else if (sortBy === 'amount') {
            aVal = a.amount || 0;
            bVal = b.amount || 0;
          } else if (sortBy === 'description') {
            aVal = a.description?.toLowerCase() || '';
            bVal = b.description?.toLowerCase() || '';
          } else {
            return 0;
          }
          
          if (filters.sortOrder === 'asc') {
            return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
          } else {
            return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
          }
        });
        
        setExpenses(filteredExpenses);
      } else {
        setExpenses([]);
      }
    } catch (error: any) {
      console.error('Error fetching expenses:', error);
      setError('Failed to load expenses');
      setExpenses([]);
    } finally {
      setLoading(false);
    }
  };
  
  // Calculate statistics
  const calculateStatistics = () => {
    const totalAmount = expenses.reduce((sum, e) => sum + (e.amount || 0), 0);
    const approvedAmount = expenses
      .filter(e => e.isApproved)
      .reduce((sum, e) => sum + (e.amount || 0), 0);
    const pendingAmount = expenses
      .filter(e => !e.isApproved)
      .reduce((sum, e) => sum + (e.amount || 0), 0);
    
    // Calculate category statistics
    const categoryMap: { [key: string]: { amount: number; count: number; icon: string } } = {};
    expenses.forEach(expense => {
      const category = expense.category || 'other';
      const categoryIcon = expenseCategories.find(c => c.value === category)?.icon || '📌';
      
      if (!categoryMap[category]) {
        categoryMap[category] = { amount: 0, count: 0, icon: categoryIcon };
      }
      categoryMap[category].amount += expense.amount || 0;
      categoryMap[category].count += 1;
    });
    
    const categoryStats = Object.entries(categoryMap).map(([category, data]) => ({
      category,
      icon: data.icon,
      count: data.count,
      amount: data.amount
    }));
    
    setStatistics({
      totalAmount,
      approvedAmount,
      pendingAmount,
      totalCount: expenses.length,
      categoryStats
    });
  };
  
  // Filter change handler
  const handleFilterChange = (field: string, value: any) => {
    setFilters(prev => ({ ...prev, [field]: value }));
  };
  
  // Sort toggle
  const handleSort = (field: string) => {
    setFilters(prev => ({
      ...prev,
      sortBy: field,
      sortOrder: prev.sortBy === field && prev.sortOrder === 'asc' ? 'desc' : 'asc'
    }));
  };
  
  // Clear filters
  const clearFilters = () => {
    setFilters({
      category: '',
      tourId: '',
      paymentMethod: '',
      isApproved: undefined,
      search: '',
      sortBy: 'expenseDate',
      sortOrder: 'desc'
    });
  };
  
  // Initialize form for creating new expense
  const handleCreate = () => {
    setCurrentExpense(null);
    setIsEditing(false);
    resetExpenseForm();
    setShowModal(true);
  };
  
  // Initialize form for editing
  const handleEdit = (expense: Expense) => {
    setCurrentExpense(expense);
    setIsEditing(true);
    setExpenseForm({
      description: expense.description,
      amount: expense.amount,
      category: expense.category,
      expenseDate: expense.expenseDate ? new Date(expense.expenseDate).toISOString().split('T')[0] : '',
      tourId: typeof expense.tour === 'object' ? expense.tour._id : expense.tour || '',
      paymentMethod: expense.paymentMethod as 'cash' | 'card' | 'upi' | 'netbanking' | 'other',
      receiptNumber: expense.receiptNumber || '',
      notes: expense.notes || '',
      vendor: {
        name: expense.vendor?.name || '',
        contact: expense.vendor?.contact || '',
        address: expense.vendor?.address || ''
      },
      location: {
        name: expense.location?.name || '',
        address: expense.location?.address || ''
      }
    });
    setShowModal(true);
  };
  
  // Submit handler
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const expenseData = {
        ...expenseForm,
        tour: expenseForm.tourId || undefined
      };
      
      if (isEditing && currentExpense) {
        await expensesAPI.update(currentExpense._id, expenseData);
        setSuccess('Expense updated successfully');
      } else {
        await expensesAPI.create(expenseData as any);
        setSuccess('Expense created successfully');
      }
      
      setShowModal(false);
      resetExpenseForm();
      await fetchExpenses();
    } catch (error) {
      console.error('Error saving expense:', error);
      setError('Failed to save expense');
    }
  };
  
  // Delete handler
  const handleDelete = async (expenseId: string) => {
    if (!confirm('Are you sure you want to delete this expense?')) return;
    
    try {
      await expensesAPI.delete(expenseId);
      setSuccess('Expense deleted successfully');
      await fetchExpenses();
    } catch (error) {
      console.error('Error deleting expense:', error);
      setError('Failed to delete expense');
    }
  };
  
  // Approve handler
  const handleApprove = async (expenseId: string, isApproved: boolean) => {
    try {
      await expensesAPI.adminApprove(expenseId, isApproved);
      setSuccess(`Expense ${isApproved ? 'approved' : 'unapproved'} successfully`);
      await fetchExpenses();
    } catch (error) {
      console.error('Error updating expense approval:', error);
      setError('Failed to update expense approval');
    }
  };
  
  // Reset form
  const resetExpenseForm = () => {
    setExpenseForm({
      description: '',
      amount: 0,
      category: 'accommodation',
      expenseDate: '',
      tourId: '',
      paymentMethod: 'cash',
      receiptNumber: '',
      notes: '',
      vendor: {
        name: '',
        contact: '',
        address: ''
      },
      location: {
        name: '',
        address: ''
      }
    });
    setCurrentExpense(null);
    setIsEditing(false);
  };
  
  // Helper functions for badges
  const getCategoryBadge = (category: string) => {
    const cat = expenseCategories.find(c => c.value === category);
    return (
      <Badge bg="primary" className="categoryBadge">
        {cat?.icon} {cat?.label || category}
      </Badge>
    );
  };
  
  const getPaymentMethodBadge = (method: string) => {
    const pm = paymentMethods.find(m => m.value === method);
    return (
      <Badge bg="info" className="paymentBadge">
        {pm?.icon} {pm?.label || method}
      </Badge>
    );
  };
  
  // Render List Tab
  const renderListTab = () => (
    <div className="expensesListTab">
      {/* Filters Card */}
      <Card className="mb-4 filterCard">
        <Card.Body>
          <h5 className="filterTitle mb-3">🔍 Filters</h5>
          <Row>
            <Col md={3}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Category</Form.Label>
                <Form.Select
                  value={filters.category}
                  onChange={(e) => handleFilterChange('category', e.target.value)}
                  className="enhancedFormControl"
                >
                  <option value="">All Categories</option>
                  {expenseCategories.map(cat => (
                    <option key={cat.value} value={cat.value}>
                      {cat.icon} {cat.label}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={3}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Tour</Form.Label>
                <Form.Select
                  value={filters.tourId}
                  onChange={(e) => handleFilterChange('tourId', e.target.value)}
                  className="enhancedFormControl"
                >
                  <option value="">All Tours</option>
                  {tours.map(tour => (
                    <option key={tour._id} value={tour._id}>{tour.title}</option>
                  ))}
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={3}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Payment Method</Form.Label>
                <Form.Select
                  value={filters.paymentMethod}
                  onChange={(e) => handleFilterChange('paymentMethod', e.target.value)}
                  className="enhancedFormControl"
                >
                  <option value="">All Methods</option>
                  {paymentMethods.map(method => (
                    <option key={method.value} value={method.value}>
                      {method.icon} {method.label}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={3}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Approval Status</Form.Label>
                <Form.Select
                  value={filters.isApproved === undefined ? '' : filters.isApproved.toString()}
                  onChange={(e) => handleFilterChange('isApproved', e.target.value === '' ? undefined : e.target.value === 'true')}
                  className="enhancedFormControl"
                >
                  <option value="">All Status</option>
                  <option value="true">✅ Approved</option>
                  <option value="false">⏳ Pending</option>
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>
          <Row>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Search</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="Search description, receipt..."
                  value={filters.search}
                  onChange={(e) => handleFilterChange('search', e.target.value)}
                  className="enhancedFormControl"
                />
              </Form.Group>
            </Col>
            <Col md={3}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Sort By</Form.Label>
                <Form.Select
                  value={filters.sortBy}
                  onChange={(e) => handleFilterChange('sortBy', e.target.value)}
                  className="enhancedFormControl"
                >
                  <option value="expenseDate">Date</option>
                  <option value="amount">Amount</option>
                  <option value="description">Description</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={2}>
              <Form.Group className="mb-3">
                <Form.Label className="filterLabel">Order</Form.Label>
                <Form.Select
                  value={filters.sortOrder}
                  onChange={(e) => handleFilterChange('sortOrder', e.target.value)}
                  className="enhancedFormControl"
                >
                  <option value="asc">↑ Ascending</option>
                  <option value="desc">↓ Descending</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={2} className="d-flex align-items-end">
              <Button
                variant="primary"
                onClick={handleCreate}
                className="w-100 mb-3 createButton"
              >
                <i className="fas fa-plus me-2"></i>Add Expense
              </Button>
            </Col>
            <Col md={1} className="d-flex align-items-end">
              <Button
                variant="outline-secondary"
                onClick={clearFilters}
                className="w-100 mb-3"
              >
                <i className="fas fa-redo"></i>
              </Button>
            </Col>
          </Row>
        </Card.Body>
      </Card>
      
      {/* Expenses Table Card */}
      <Card className="tableCard">
        <Card.Body>
          
          {loading ? (
            <div className="text-center py-5">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
            </div>
          ) : expenses.length === 0 ? (
            <Alert variant="info">
              <i className="fas fa-info-circle me-2"></i>
              No expenses found. {filters.search || filters.category || filters.tourId ? 'Try adjusting your filters.' : 'Add your first expense to get started.'}
            </Alert>
          ) : (
            <Table responsive className="expensesTable">
              <thead>
                <tr>
                  <th onClick={() => handleSort('description')} style={{ cursor: 'pointer' }}>
                    Description {filters.sortBy === 'description' && (filters.sortOrder === 'asc' ? '↑' : '↓')}
                  </th>
                  <th>Category</th>
                  <th onClick={() => handleSort('amount')} style={{ cursor: 'pointer' }}>
                    Amount {filters.sortBy === 'amount' && (filters.sortOrder === 'asc' ? '↑' : '↓')}
                  </th>
                  <th>Tour</th>
                  <th onClick={() => handleSort('expenseDate')} style={{ cursor: 'pointer' }}>
                    Date {filters.sortBy === 'expenseDate' && (filters.sortOrder === 'asc' ? '↑' : '↓')}
                  </th>
                  <th>Payment</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {expenses.map(expense => (
                  <tr key={expense._id}>
                    <td>
                      <strong>{expense.description}</strong>
                      {expense.receiptNumber && (
                        <>
                          <br />
                          <small className="text-primary">📄 {expense.receiptNumber}</small>
                        </>
                      )}
                      {expense.notes && (
                        <>
                          <br />
                          <small className="text-muted">{expense.notes.substring(0, 50)}{expense.notes.length > 50 ? '...' : ''}</small>
                        </>
                      )}
                    </td>
                    <td>{getCategoryBadge(expense.category)}</td>
                    <td><strong>₹{expense.amount.toLocaleString()}</strong></td>
                    <td>
                      {expense.tour && typeof expense.tour === 'object' ? (
                        <small>{expense.tour.title}</small>
                      ) : (
                        <Badge bg="light" text="dark">No tour</Badge>
                      )}
                    </td>
                    <td>
                      <small>
                        {expense.expenseDate ? new Date(expense.expenseDate).toLocaleDateString() : 'No date'}
                      </small>
                    </td>
                    <td>{getPaymentMethodBadge(expense.paymentMethod)}</td>
                    <td>
                      <Badge
                        bg={expense.isApproved ? 'success' : 'warning'}
                        style={{ cursor: 'pointer' }}
                        onClick={() => handleApprove(expense._id, !expense.isApproved)}
                      >
                        {expense.isApproved ? '✅ Approved' : '⏳ Pending'}
                      </Badge>
                    </td>
                    <td>
                      <Button
                        variant="outline-primary"
                        size="sm"
                        className="me-2"
                        onClick={() => handleEdit(expense)}
                      >
                        <i className="fas fa-edit"></i>
                      </Button>
                      <Button
                        variant="outline-danger"
                        size="sm"
                        onClick={() => handleDelete(expense._id)}
                      >
                        <i className="fas fa-trash"></i>
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          )}
        </Card.Body>
      </Card>
    </div>
  );
  
  // Render Statistics Tab
  const renderStatisticsTab = () => (
    <div className="expensesStatsTab">
      {/* Summary Statistics Cards */}
      <Row className="mb-4">
        <Col md={3}>
          <Card className="statsCard">
            <Card.Body className="text-center">
              <div className="statsIcon">💰</div>
              <h3 className="statsValue">₹{statistics.totalAmount.toLocaleString()}</h3>
              <p className="statsLabel">Total Expenses</p>
              <small className="text-muted">{statistics.totalCount} entries</small>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="statsCard">
            <Card.Body className="text-center">
              <div className="statsIcon">✅</div>
              <h3 className="statsValue text-success">₹{statistics.approvedAmount.toLocaleString()}</h3>
              <p className="statsLabel">Approved</p>
              <small className="text-muted">
                {statistics.totalAmount > 0 ? ((statistics.approvedAmount / statistics.totalAmount) * 100).toFixed(1) : 0}% approval rate
              </small>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="statsCard">
            <Card.Body className="text-center">
              <div className="statsIcon">⏳</div>
              <h3 className="statsValue text-warning">₹{statistics.pendingAmount.toLocaleString()}</h3>
              <p className="statsLabel">Pending</p>
              <small className="text-muted">
                {statistics.totalAmount > 0 ? ((statistics.pendingAmount / statistics.totalAmount) * 100).toFixed(1) : 0}% pending
              </small>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="statsCard">
            <Card.Body className="text-center">
              <div className="statsIcon">📊</div>
              <h3 className="statsValue text-info">₹{statistics.totalCount > 0 ? Math.round(statistics.totalAmount / statistics.totalCount).toLocaleString() : 0}</h3>
              <p className="statsLabel">Average Expense</p>
              <small className="text-muted">per transaction</small>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      
      {/* Category Breakdown Table */}
      <Card className="tableCard">
        <Card.Body>
          <h5 className="cardTitle mb-3">📋 Expenses by Category</h5>
          {statistics.categoryStats.length === 0 ? (
            <Alert variant="info">
              <i className="fas fa-info-circle me-2"></i>
              No expense data available for statistics.
            </Alert>
          ) : (
            <Table responsive className="expensesTable">
              <thead>
                <tr>
                  <th>Category</th>
                  <th className="text-end">Count</th>
                  <th className="text-end">Total Amount</th>
                  <th className="text-end">Percentage</th>
                  <th className="text-end">Average</th>
                </tr>
              </thead>
              <tbody>
                {statistics.categoryStats
                  .sort((a, b) => b.amount - a.amount)
                  .map(stat => (
                    <tr key={stat.category}>
                      <td>
                        <span className="me-2">{stat.icon}</span>
                        <strong>{expenseCategories.find(c => c.value === stat.category)?.label || stat.category}</strong>
                      </td>
                      <td className="text-end">{stat.count}</td>
                      <td className="text-end"><strong>₹{stat.amount.toLocaleString()}</strong></td>
                      <td className="text-end">
                        <Badge bg="primary">
                          {statistics.totalAmount > 0 ? ((stat.amount / statistics.totalAmount) * 100).toFixed(1) : 0}%
                        </Badge>
                      </td>
                      <td className="text-end">₹{stat.count > 0 ? Math.round(stat.amount / stat.count).toLocaleString() : 0}</td>
                    </tr>
                  ))}
              </tbody>
              <tfoot>
                <tr className="table-primary">
                  <th>TOTAL</th>
                  <th className="text-end">{statistics.totalCount}</th>
                  <th className="text-end">₹{statistics.totalAmount.toLocaleString()}</th>
                  <th className="text-end"><Badge bg="success">100%</Badge></th>
                  <th className="text-end">₹{statistics.totalCount > 0 ? Math.round(statistics.totalAmount / statistics.totalCount).toLocaleString() : 0}</th>
                </tr>
              </tfoot>
            </Table>
          )}
        </Card.Body>
      </Card>
    </div>
  );
  
  // Loading state
  if (loading && expenses.length === 0) {
    return (
      <div className="expensesPage">
        <Container fluid className="text-center py-5">
          <div className="spinner-border text-primary" role="status" style={{ width: '3rem', height: '3rem' }}>
            <span className="visually-hidden">Loading...</span>
          </div>
          <p className="mt-3">Loading expenses...</p>
        </Container>
      </div>
    );
  }
  
  // Main render
  return (
    <div className="expensesPage">
      {/* Main Content */}
      <Container className="mt-4">
        {/* Alert Messages */}
        {error && (
          <Alert variant="danger" dismissible onClose={() => setError(null)} className="mb-4">
            <i className="fas fa-exclamation-circle me-2"></i>
            {error}
          </Alert>
        )}
        {success && (
          <Alert variant="success" dismissible onClose={() => setSuccess(null)} className="mb-4">
            <i className="fas fa-check-circle me-2"></i>
            {success}
          </Alert>
        )}
        
        {/* Tabs */}
        <Tabs
          activeKey={activeTab}
          onSelect={(k) => setActiveTab(k || 'list')}
          className="customTabs mb-4"
        >
          <Tab
            eventKey="list"
            title={<span className="tabTitle"><i className="fas fa-list me-2"></i>Expenses List</span>}
          >
            {renderListTab()}
          </Tab>
          <Tab
            eventKey="statistics"
            title={<span className="tabTitle"><i className="fas fa-chart-bar me-2"></i>Statistics</span>}
          >
            {renderStatisticsTab()}
          </Tab>
        </Tabs>
        
        {/* Add/Edit Expense Modal */}
        <Modal show={showModal} onHide={() => setShowModal(false)} size="xl">
          <Modal.Header closeButton>
            <Modal.Title>
              {isEditing ? '✏️ Edit Expense' : '➕ Add New Expense'}
            </Modal.Title>
          </Modal.Header>
          <Form onSubmit={handleSubmit}>
            <Modal.Body>
              <Tabs defaultActiveKey="basic" className="mb-3">
                <Tab eventKey="basic" title="Basic Info">
                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Description <span className="text-danger">*</span></Form.Label>
                        <Form.Control
                          type="text"
                          required
                          value={expenseForm.description}
                          onChange={(e) => setExpenseForm({ ...expenseForm, description: e.target.value })}
                          placeholder="Enter expense description"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={3}>
                      <Form.Group className="mb-3">
                        <Form.Label>Amount <span className="text-danger">*</span></Form.Label>
                        <Form.Control
                          type="number"
                          required
                          min="0"
                          step="0.01"
                          value={expenseForm.amount}
                          onChange={(e) => setExpenseForm({ ...expenseForm, amount: parseFloat(e.target.value) || 0 })}
                          placeholder="0.00"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={3}>
                      <Form.Group className="mb-3">
                        <Form.Label>Date <span className="text-danger">*</span></Form.Label>
                        <Form.Control
                          type="date"
                          required
                          value={expenseForm.expenseDate}
                          onChange={(e) => setExpenseForm({ ...expenseForm, expenseDate: e.target.value })}
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                  
                  <Row>
                    <Col md={4}>
                      <Form.Group className="mb-3">
                        <Form.Label>Category <span className="text-danger">*</span></Form.Label>
                        <Form.Select
                          required
                          value={expenseForm.category}
                          onChange={(e) => setExpenseForm({ ...expenseForm, category: e.target.value })}
                        >
                          {expenseCategories.map(cat => (
                            <option key={cat.value} value={cat.value}>
                              {cat.icon} {cat.label}
                            </option>
                          ))}
                        </Form.Select>
                      </Form.Group>
                    </Col>
                    <Col md={4}>
                      <Form.Group className="mb-3">
                        <Form.Label>Payment Method</Form.Label>
                        <Form.Select
                          value={expenseForm.paymentMethod}
                          onChange={(e) => setExpenseForm({ ...expenseForm, paymentMethod: e.target.value as any })}
                        >
                          {paymentMethods.map(method => (
                            <option key={method.value} value={method.value}>
                              {method.icon} {method.label}
                            </option>
                          ))}
                        </Form.Select>
                      </Form.Group>
                    </Col>
                    <Col md={4}>
                      <Form.Group className="mb-3">
                        <Form.Label>Tour</Form.Label>
                        <Form.Select
                          value={expenseForm.tourId}
                          onChange={(e) => setExpenseForm({ ...expenseForm, tourId: e.target.value })}
                        >
                          <option value="">No specific tour</option>
                          {tours.map(tour => (
                            <option key={tour._id} value={tour._id}>{tour.title}</option>
                          ))}
                        </Form.Select>
                      </Form.Group>
                    </Col>
                  </Row>
                  
                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Receipt Number</Form.Label>
                        <Form.Control
                          type="text"
                          value={expenseForm.receiptNumber}
                          onChange={(e) => setExpenseForm({ ...expenseForm, receiptNumber: e.target.value })}
                          placeholder="Optional"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Notes</Form.Label>
                        <Form.Control
                          as="textarea"
                          rows={2}
                          value={expenseForm.notes}
                          onChange={(e) => setExpenseForm({ ...expenseForm, notes: e.target.value })}
                          placeholder="Additional notes (optional)"
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                </Tab>
                
                <Tab eventKey="vendor" title="Vendor Details">
                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Vendor Name</Form.Label>
                        <Form.Control
                          type="text"
                          value={expenseForm.vendor.name}
                          onChange={(e) => setExpenseForm({
                            ...expenseForm,
                            vendor: { ...expenseForm.vendor, name: e.target.value }
                          })}
                          placeholder="Vendor or supplier name"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Vendor Contact</Form.Label>
                        <Form.Control
                          type="text"
                          value={expenseForm.vendor.contact}
                          onChange={(e) => setExpenseForm({
                            ...expenseForm,
                            vendor: { ...expenseForm.vendor, contact: e.target.value }
                          })}
                          placeholder="Phone or email"
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                  <Row>
                    <Col md={12}>
                      <Form.Group className="mb-3">
                        <Form.Label>Vendor Address</Form.Label>
                        <Form.Control
                          as="textarea"
                          rows={2}
                          value={expenseForm.vendor.address}
                          onChange={(e) => setExpenseForm({
                            ...expenseForm,
                            vendor: { ...expenseForm.vendor, address: e.target.value }
                          })}
                          placeholder="Full address"
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                </Tab>
                
                <Tab eventKey="location" title="Location">
                  <Row>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Location Name</Form.Label>
                        <Form.Control
                          type="text"
                          value={expenseForm.location.name}
                          onChange={(e) => setExpenseForm({
                            ...expenseForm,
                            location: { ...expenseForm.location, name: e.target.value }
                          })}
                          placeholder="City, landmark, or venue"
                        />
                      </Form.Group>
                    </Col>
                    <Col md={6}>
                      <Form.Group className="mb-3">
                        <Form.Label>Location Address</Form.Label>
                        <Form.Control
                          as="textarea"
                          rows={2}
                          value={expenseForm.location.address}
                          onChange={(e) => setExpenseForm({
                            ...expenseForm,
                            location: { ...expenseForm.location, address: e.target.value }
                          })}
                          placeholder="Full address"
                        />
                      </Form.Group>
                    </Col>
                  </Row>
                </Tab>
              </Tabs>
            </Modal.Body>
            <Modal.Footer>
              <Button variant="secondary" onClick={() => setShowModal(false)}>
                Cancel
              </Button>
              <Button variant="primary" type="submit">
                <i className="fas fa-save me-2"></i>
                {isEditing ? 'Update' : 'Create'} Expense
              </Button>
            </Modal.Footer>
          </Form>
        </Modal>
      </Container>
    </div>
  );
};

export default ExpensesPage;
