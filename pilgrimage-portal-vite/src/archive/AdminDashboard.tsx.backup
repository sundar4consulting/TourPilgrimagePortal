import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Table, Button, Modal, Form, Tab, Tabs, Badge, Alert } from 'react-bootstrap';
import { toursAPI, bookingsAPI, expensesAPI, type Tour, type Booking, type Expense } from '../services/api';
  tourId?: number;
}

const AdminDashboard: React.FC = () => {
  // State for data
  const [tours, setTours] = useState<Tour[]>([]);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [expenses, setExpenses] = useState<Expense[]>([]);
  
  // Loading and error states
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Modal states
  const [showTourModal, setShowTourModal] = useState(false);
  const [showExpenseModal, setShowExpenseModal] = useState(false);
  const [editingTour, setEditingTour] = useState<Tour | null>(null);
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  
  // Form data
  const [tourForm, setTourForm] = useState<Partial<Tour>>({
    title: '',
    description: '',
    shortDescription: '',
    duration: { days: 0, nights: 0 },
    pricing: { adult: 0, child: 0, senior: 0 },
    category: 'pilgrimage',
    difficulty: 'easy',
    featured: false,
    destinations: [],
    itinerary: [],
    inclusions: [],
    exclusions: [],
    transportation: { mode: 'bus', details: '' },
    maxParticipants: 0,
    availableSeats: 0,
    startDate: '',
    endDate: '',
    registrationDeadline: '',
    cancellationPolicy: '',
    termsAndConditions: [],
    minimumAge: 0,
    fitnessLevel: 'low',
    specialRequirements: [],
    images: [],
    status: 'draft',
    createdBy: ''
  });
  
  const [expenseForm, setExpenseForm] = useState<Partial<Expense>>({
    tour: '',
    addedBy: '',
    category: 'transportation',
    subcategory: '',
    description: '',
    amount: 0,
    currency: 'INR',
    expenseDate: '',
    location: { city: '', state: '', place: '' },
    vendor: { name: '', contact: '', address: '' },
    paymentMethod: 'cash',
    receiptNumber: '',
    participants: 1,
    perPersonCost: 0,
    isReimbursable: true,
    isApproved: false,
    approvedBy: '',
    approvalDate: '',
    notes: '',
    attachments: [],
    tags: []
  });

  // Fetch all data on component mount
  useEffect(() => {
    fetchAllData();
  }, []);

  const fetchAllData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [toursResponse, bookingsResponse, expensesResponse] = await Promise.all([
        toursAPI.getAll().catch(() => ({ data: [] })),
        bookingsAPI.getAll().catch(() => ({ data: [] })),
        expensesAPI.getAll().catch(() => ({ data: [] }))
      ]);
      
      setTours(Array.isArray(toursResponse.data) ? toursResponse.data : []);
      setBookings(Array.isArray(bookingsResponse.data) ? bookingsResponse.data : []);
      setExpenses(Array.isArray(expensesResponse.data) ? expensesResponse.data : []);
    } catch (err) {
      setError('Failed to fetch data. Please try again later.');
      console.error('Error fetching data:', err);
    } finally {
      setLoading(false);
    }
  };

  // Calculate statistics
  const totalRevenue = bookings.reduce((sum, booking) => sum + booking.totalAmount, 0);
  const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0);
  const netProfit = totalRevenue - totalExpenses;
  const activeBookings = bookings.filter(booking => booking.status === 'confirmed').length;

  if (loading) {
    return (
      <Container className="mt-4">
        <div className="text-center">
          <h2>Loading dashboard...</h2>
        </div>
      </Container>
    );
  }
  return (
    <Container fluid className="mt-4">
      <Row className="mb-4">
        <Col>
          <h1>Admin Dashboard</h1>
          {error && (
            <Alert variant="danger" dismissible onClose={() => setError(null)}>
              {error}
            </Alert>
          )}
        </Col>
      </Row>

      <Tabs defaultActiveKey="overview" id="admin-dashboard-tabs" className="mb-3">
        {/* Overview Tab */}
        <Tab eventKey="overview" title="Overview">
          <Row className="mb-4">
            <Col md={3}>
              <Card className="text-center">
                <Card.Body>
                  <Card.Title>Total Tours</Card.Title>
                  <h2 className="text-primary">{tours.length}</h2>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3}>
              <Card className="text-center">
                <Card.Body>
                  <Card.Title>Active Bookings</Card.Title>
                  <h2 className="text-success">{activeBookings}</h2>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3}>
              <Card className="text-center">
                <Card.Body>
                  <Card.Title>Total Revenue</Card.Title>
                  <h2 className="text-info">₹{totalRevenue.toLocaleString()}</h2>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3}>
              <Card className="text-center">
                <Card.Body>
                  <Card.Title>Net Profit</Card.Title>
                  <h2 className={netProfit >= 0 ? "text-success" : "text-danger"}>
                    ₹{netProfit.toLocaleString()}
                  </h2>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          <Row>
            <Col md={6}>
              <Card>
                <Card.Header>Recent Bookings</Card.Header>
                <Card.Body>
                  {bookings.slice(0, 5).map(booking => (
                    <div key={booking.id} className="d-flex justify-content-between align-items-center mb-2">
                      <div>
                        <strong>{booking.customerName}</strong>
                        <br />
                        <small className="text-muted">₹{booking.totalAmount}</small>
                      </div>
                      <Badge bg={booking.status === 'confirmed' ? 'success' : 'warning'}>
                        {booking.status}
                      </Badge>
                    </div>
                  ))}
                </Card.Body>
              </Card>
            </Col>
            <Col md={6}>
              <Card>
                <Card.Header>Recent Expenses</Card.Header>
                <Card.Body>
                  {expenses.slice(0, 5).map(expense => (
                    <div key={expense.id} className="d-flex justify-content-between align-items-center mb-2">
                      <div>
                        <strong>{expense.category}</strong>
                        <br />
                        <small className="text-muted">{expense.description}</small>
                      </div>
                      <span className="text-danger">₹{expense.amount}</span>
                    </div>
                  ))}
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>

        {/* Tours Tab */}
        <Tab eventKey="tours" title="Tours">
          <Row className="mb-3">
            <Col>
              <Button 
                variant="primary" 
                onClick={() => {
                  setTourForm({
                    name: '',
                    description: '',
                    duration: '',
                    price: 0,
                    availableSeats: 0,
                    startDate: '',
                    endDate: '',
                    imageUrl: ''
                  });
                  setEditingTour(null);
                  setShowTourModal(true);
                }}
              >
                Add New Tour
              </Button>
            </Col>
          </Row>
          <Row>
            <Col>
              <Table striped bordered hover responsive>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Duration</th>
                    <th>Price</th>
                    <th>Available Seats</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {tours.map(tour => (
                    <tr key={tour.id}>
                      <td>{tour.id}</td>
                      <td>{tour.name}</td>
                      <td>{tour.duration}</td>
                      <td>₹{tour.price}</td>
                      <td>{tour.availableSeats}</td>
                      <td>{new Date(tour.startDate).toLocaleDateString()}</td>
                      <td>{new Date(tour.endDate).toLocaleDateString()}</td>
                      <td>
                        <Button 
                          variant="outline-primary" 
                          size="sm" 
                          className="me-2"
                          onClick={() => {
                            setEditingTour(tour);
                            setTourForm(tour);
                            setShowTourModal(true);
                          }}
                        >
                          Edit
                        </Button>
                        <Button 
                          variant="outline-danger" 
                          size="sm"
                          onClick={() => {
                            if (window.confirm('Are you sure you want to delete this tour?')) {
                              // Delete logic will be added later
                            }
                          }}
                        >
                          Delete
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Col>
          </Row>
        </Tab>

        {/* Bookings Tab */}
        <Tab eventKey="bookings" title="Bookings">
          <Row>
            <Col>
              <Table striped bordered hover responsive>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Customer</th>
                    <th>Email</th>
                    <th>Tour</th>
                    <th>People</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Travel Date</th>
                  </tr>
                </thead>
                <tbody>
                  {bookings.map(booking => (
                    <tr key={booking.id}>
                      <td>{booking.id}</td>
                      <td>{booking.customerName}</td>
                      <td>{booking.customerEmail}</td>
                      <td>{booking.tour?.name || 'N/A'}</td>
                      <td>{booking.numberOfPeople}</td>
                      <td>₹{booking.totalAmount}</td>
                      <td>
                        <Badge bg={booking.status === 'confirmed' ? 'success' : 'warning'}>
                          {booking.status}
                        </Badge>
                      </td>
                      <td>{new Date(booking.travelDate).toLocaleDateString()}</td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Col>
          </Row>
        </Tab>

        {/* Expenses Tab */}
        <Tab eventKey="expenses" title="Expenses">
          <Row className="mb-3">
            <Col>
              <Button 
                variant="primary" 
                onClick={() => {
                  setExpenseForm({
                    category: '',
                    description: '',
                    amount: 0,
                    date: '',
                    tourId: undefined
                  });
                  setEditingExpense(null);
                  setShowExpenseModal(true);
                }}
              >
                Add New Expense
              </Button>
            </Col>
          </Row>
          <Row>
            <Col>
              <Table striped bordered hover responsive>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Category</th>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Tour</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {expenses.map(expense => (
                    <tr key={expense.id}>
                      <td>{expense.id}</td>
                      <td>{expense.category}</td>
                      <td>{expense.description}</td>
                      <td>₹{expense.amount}</td>
                      <td>{new Date(expense.date).toLocaleDateString()}</td>
                      <td>{expense.tourId ? tours.find(t => t.id === expense.tourId)?.name || 'N/A' : 'General'}</td>
                      <td>
                        <Button 
                          variant="outline-primary" 
                          size="sm" 
                          className="me-2"
                          onClick={() => {
                            setEditingExpense(expense);
                            setExpenseForm(expense);
                            setShowExpenseModal(true);
                          }}
                        >
                          Edit
                        </Button>
                        <Button 
                          variant="outline-danger" 
                          size="sm"
                          onClick={() => {
                            if (window.confirm('Are you sure you want to delete this expense?')) {
                              // Delete logic will be added later
                            }
                          }}
                        >
                          Delete
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Col>
          </Row>
        </Tab>
      </Tabs>

      {/* Tour Modal */}
      <Modal show={showTourModal} onHide={() => setShowTourModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>{editingTour ? 'Edit Tour' : 'Add New Tour'}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Row>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Tour Name</Form.Label>
                  <Form.Control
                    type="text"
                    value={tourForm.name || ''}
                    onChange={(e) => setTourForm({...tourForm, name: e.target.value})}
                    placeholder="Enter tour name"
                  />
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Duration</Form.Label>
                  <Form.Control
                    type="text"
                    value={tourForm.duration || ''}
                    onChange={(e) => setTourForm({...tourForm, duration: e.target.value})}
                    placeholder="e.g., 7 days 6 nights"
                  />
                </Form.Group>
              </Col>
            </Row>
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={tourForm.description || ''}
                onChange={(e) => setTourForm({...tourForm, description: e.target.value})}
                placeholder="Enter tour description"
              />
            </Form.Group>
            <Row>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Price (₹)</Form.Label>
                  <Form.Control
                    type="number"
                    value={tourForm.price || ''}
                    onChange={(e) => setTourForm({...tourForm, price: parseFloat(e.target.value) || 0})}
                    placeholder="Enter price"
                  />
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Available Seats</Form.Label>
                  <Form.Control
                    type="number"
                    value={tourForm.availableSeats || ''}
                    onChange={(e) => setTourForm({...tourForm, availableSeats: parseInt(e.target.value) || 0})}
                    placeholder="Enter available seats"
                  />
                </Form.Group>
              </Col>
            </Row>
            <Row>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>Start Date</Form.Label>
                  <Form.Control
                    type="date"
                    value={tourForm.startDate || ''}
                    onChange={(e) => setTourForm({...tourForm, startDate: e.target.value})}
                  />
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group className="mb-3">
                  <Form.Label>End Date</Form.Label>
                  <Form.Control
                    type="date"
                    value={tourForm.endDate || ''}
                    onChange={(e) => setTourForm({...tourForm, endDate: e.target.value})}
                  />
                </Form.Group>
              </Col>
            </Row>
            <Form.Group className="mb-3">
              <Form.Label>Image URL (Optional)</Form.Label>
              <Form.Control
                type="url"
                value={tourForm.imageUrl || ''}
                onChange={(e) => setTourForm({...tourForm, imageUrl: e.target.value})}
                placeholder="Enter image URL"
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowTourModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={() => {
            // CRUD logic will be added here
            console.log('Saving tour:', tourForm);
            setShowTourModal(false);
          }}>
            {editingTour ? 'Update Tour' : 'Add Tour'}
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Expense Modal */}
      <Modal show={showExpenseModal} onHide={() => setShowExpenseModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>{editingExpense ? 'Edit Expense' : 'Add New Expense'}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Category</Form.Label>
              <Form.Select
                value={expenseForm.category || ''}
                onChange={(e) => setExpenseForm({...expenseForm, category: e.target.value})}
              >
                <option value="">Select category</option>
                <option value="Transportation">Transportation</option>
                <option value="Accommodation">Accommodation</option>
                <option value="Food">Food</option>
                <option value="Guide">Guide</option>
                <option value="Equipment">Equipment</option>
                <option value="Marketing">Marketing</option>
                <option value="Other">Other</option>
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                type="text"
                value={expenseForm.description || ''}
                onChange={(e) => setExpenseForm({...expenseForm, description: e.target.value})}
                placeholder="Enter expense description"
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Amount (₹)</Form.Label>
              <Form.Control
                type="number"
                value={expenseForm.amount || ''}
                onChange={(e) => setExpenseForm({...expenseForm, amount: parseFloat(e.target.value) || 0})}
                placeholder="Enter amount"
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Date</Form.Label>
              <Form.Control
                type="date"
                value={expenseForm.date || ''}
                onChange={(e) => setExpenseForm({...expenseForm, date: e.target.value})}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Related Tour (Optional)</Form.Label>
              <Form.Select
                value={expenseForm.tourId || ''}
                onChange={(e) => setExpenseForm({...expenseForm, tourId: e.target.value ? parseInt(e.target.value) : undefined})}
              >
                <option value="">Select tour (optional)</option>
                {tours.map(tour => (
                  <option key={tour.id} value={tour.id}>{tour.name}</option>
                ))}
              </Form.Select>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowExpenseModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={() => {
            // CRUD logic will be added here
            console.log('Saving expense:', expenseForm);
            setShowExpenseModal(false);
          }}>
            {editingExpense ? 'Update Expense' : 'Add Expense'}
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default AdminDashboard;
